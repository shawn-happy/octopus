<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.octopus.actus.connector.jdbc.dao.dialect.doris.DorisDCLDao">

    <update id="createRole">
        CREATE ROLE IF NOT EXISTS ${role}
    </update>

    <update id="dropRole">
        DROP ROLE IF EXISTS ${role}
    </update>

    <update id="createUser" parameterType="user">
        CREATE USER IF NOT EXISTS #{name}
        <if test="host != null">@#{host}</if>
        <if test="password != null">IDENTIFIED BY #{password}</if>
        <if test="role != null">DEFAULT ROLE #{role}</if>
        <if test="historyPolicy != null">PASSWORD_HISTORY
            <choose>
                <when test="historyPolicy.interval == null">DEFAULT</when>
                <otherwise>
                    ${historyPolicy.interval}
                </otherwise>
            </choose>
        </if>
        <if test="expirePolicy != null">PASSWORD_EXPIRE
            <choose>
                <when test="expirePolicy.isNever()">NEVER</when>
                <when test="!expirePolicy.isNever() and expirePolicy.interval == null">DEFAULT</when>
                <otherwise>
                    INTERVAL ${expirePolicy.interval} ${expirePolicy.unit}
                </otherwise>
            </choose>
        </if>
        <if test="failedLoginPolicy != null">FAILED_LOGIN_ATTEMPTS ${failedLoginPolicy.interval}</if>
        <if test="lockTimePolicy != null">PASSWORD_LOCK_TIME ${lockTimePolicy.interval} ${lockTimePolicy.unit}</if>
    </update>

    <update id="dropUser" parameterType="user">
        DROP USER IF EXISTS #{name}
        <if test="host != null">@#{host}</if>
    </update>

    <update id="modifyPassword" parameterType="user">
        ALTER USER IF EXISTS #{name}
        <if test="host != null">@#{host}</if>
        <if test="password != null">IDENTIFIED BY #{password}</if>
        <if test="historyPolicy != null">PASSWORD_HISTORY
            <choose>
                <when test="historyPolicy.interval == null">DEFAULT</when>
                <otherwise>
                    ${historyPolicy.interval}
                </otherwise>
            </choose>
        </if>
        <if test="expirePolicy != null">PASSWORD_EXPIRE
            <choose>
                <when test="expirePolicy.isNever()">NEVER</when>
                <when test="!expirePolicy.isNever() and expirePolicy.interval == null">DEFAULT</when>
                <otherwise>
                    INTERVAL ${expirePolicy.interval} ${expirePolicy.unit}
                </otherwise>
            </choose>
        </if>
        <if test="failedLoginPolicy != null">FAILED_LOGIN_ATTEMPTS ${failedLoginPolicy.interval}</if>
        <if test="lockTimePolicy != null">PASSWORD_LOCK_TIME ${lockTimePolicy.interval} ${lockTimePolicy.unit}</if>
    </update>

    <update id="grantUserPrivilege" parameterType="privilege">
        GRANT <foreach collection="privileges" item="item" separator=",">
        ${item}
    </foreach> ON
        <choose>
            <when test="catalog == null and database == null and table == null">
                *.*.*
            </when>
            <when test="catalog != null and database == null and table == null">
                ${catalog}.*.*
            </when>
            <when test="catalog != null and database != null and table == null">
                ${catalog}.${database}.*
            </when>
            <when test="catalog == null and database != null and table == null">
                ${database}.*
            </when>
            <when test="catalog == null and database != null and table != null">
                ${database}.${table}
            </when>
            <otherwise>
                ${catalog}.${database}.${table}
            </otherwise>
        </choose>
        TO #{user}
        <if test="host != null">@#{host}</if>
    </update>

    <update id="grantRolePrivilege" parameterType="privilege">
        GRANT <foreach collection="privileges" item="item" separator=",">
        ${item}
    </foreach> ON
        <choose>
            <when test="catalog == null and database == null and table == null">
                *.*.*
            </when>
            <when test="catalog != null and database == null and table == null">
                ${catalog}.*.*
            </when>
            <when test="catalog != null and database != null and table == null">
                ${catalog}.${database}.*
            </when>
            <when test="catalog == null and database != null and table == null">
                ${database}.*
            </when>
            <when test="catalog == null and database != null and table != null">
                ${database}.${table}
            </when>
            <otherwise>
                ${catalog}.${database}.${table}
            </otherwise>
        </choose>
        TO ROLE #{role}
    </update>

    <update id="grantRolesToUser">
        GRANT
        <foreach collection="roles" item="item" separator=",">
            #{item}
        </foreach>
        TO #{user}
        <if test="host != null">@#{host}</if>
    </update>

    <update id="revokeUserPrivilege" parameterType="privilege">
        REVOKE <foreach collection="privileges" item="item" separator=",">
        ${item}
    </foreach> ON
        <choose>
            <when test="catalog == null and database == null and table == null">
                *.*.*
            </when>
            <when test="catalog != null and database == null and table == null">
                ${catalog}.*.*
            </when>
            <when test="catalog != null and database != null and table == null">
                ${catalog}.${database}.*
            </when>
            <when test="catalog == null and database != null and table == null">
                ${database}.*
            </when>
            <when test="catalog == null and database != null and table != null">
                ${database}.${table}
            </when>
            <otherwise>
                ${catalog}.${database}.${table}
            </otherwise>
        </choose>
        FROM
        #{user}
        <if test="host != null">@#{host}</if>
    </update>

    <update id="revokeRolePrivilege" parameterType="privilege">
        REVOKE <foreach collection="privileges" item="item" separator=",">
        ${item}
    </foreach> ON
        <choose>
            <when test="catalog == null and database == null and table == null">
                *.*.*
            </when>
            <when test="catalog != null and database == null and table == null">
                ${catalog}.*.*
            </when>
            <when test="catalog != null and database != null and table == null">
                ${catalog}.${database}.*
            </when>
            <when test="catalog == null and database != null and table == null">
                ${database}.*
            </when>
            <when test="catalog == null and database != null and table != null">
                ${database}.${table}
            </when>
            <otherwise>
                ${catalog}.${database}.${table}
            </otherwise>
        </choose>
        FROM ROLE #{role}
    </update>

    <update id="revokeRolesFromUser">
        REVOKE
        <foreach collection="roles" item="role" separator=",">
            #{role}
        </foreach>
        FROM
        #{user}
        <if test="host != null">@#{host}</if>
    </update>

</mapper>
