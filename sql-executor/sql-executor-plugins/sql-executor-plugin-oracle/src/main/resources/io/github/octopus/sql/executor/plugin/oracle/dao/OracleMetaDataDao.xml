<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.github.octopus.sql.executor.plugin.oracle.dao.OracleMetaDataDao">

    <sql id="SYS_SCHEMAS">
        not in ('ANONYMOUS',
                'APPQOSSYS',
                'APEX_030200',
                'APEX_PUBLIC_USER',
                'AUDSYS',
                'CTXSYS',
                'DVSYS',
                'DBSFWUSER',
                'DBSNMP',
                'GSMADMIN_INTERNAL',
                'EXFSYS',
                'FLOWS_FILES',
                'LBACSYS',
                'MDDATA',
                'MDSYS',
                'MGMT_VIEW',
                'OJVMSYS',
                'OLAPSYS',
                'ORDDATA',
                'ORDSYS',
                'ORDPLUGINS',
                'OWBSYS',
                'OWBSYS_AUDIT',
                'OUTLN',
                'SYS',
                'SYSTEM',
                'SYSMAN',
                'WMSYS',
                'XDB'
        )
    </sql>

    <select id="getDatabaseMetas" resultType="databaseMeta">
        SELECT NAME
        FROM V$DATABASE;
    </select>

    <select id="getDatabaseMetaByDatabase" parameterType="java.lang.String" resultType="databaseMeta">
        SELECT NAME
        FROM V$DATABASE
        where NAME = #{database}
    </select>

    <select id="getTableMetas" resultType="tableMeta">
        select ao.OWNER     as "database",
           ut.TABLE_NAME    as "table",
           ut.NUM_ROWS      as "row_number",
           ut.BLOCKS * 8192 as "row_size",
           ao.CREATED       as "create_time",
           ao.LAST_DDL_TIME as "update_time",
           utc.COMMENTS     as "comment"
        from USER_TABLES ut
            left join ALL_OBJECTS ao
        on ut.TABLE_NAME = ao.OBJECT_NAME
            left join USER_TAB_COMMENTS utc
            on ut.TABLE_NAME = utc.TABLE_NAME
        where ao.OBJECT_TYPE = 'TABLE'
    </select>

    <select id="getTableMetasByDatabases" resultType="tableMeta">
        select ao.OWNER as "database",
        ut.TABLE_NAME as "table",
        ut.NUM_ROWS as "row_number",
        ut.BLOCKS * 8192 as "row_size",
        ao.CREATED as "create_time",
        ao.LAST_DDL_TIME as "update_time",
        utc.COMMENTS as "comment"
        from USER_TABLES ut
        left join ALL_OBJECTS ao
        on ut.TABLE_NAME = ao.OBJECT_NAME
        left join USER_TAB_COMMENTS utc
        on ut.TABLE_NAME = utc.TABLE_NAME
        where ao.OBJECT_TYPE = 'TABLE' and ao.OWNER in
        <foreach collection="databases" item="database" open="(" close=")" separator=",">
            #{database}
        </foreach>
    </select>


    <select id="getTableMetasByDatabaseAndSchema" resultType="tableMeta" parameterType="java.lang.String">
        select ao.OWNER     as "database",
               ut.TABLE_NAME    as "table",
               ut.NUM_ROWS      as "row_number",
               ut.BLOCKS * 8192 as "row_size",
               ao.CREATED       as "create_time",
               ao.LAST_DDL_TIME as "update_time",
               utc.COMMENTS     as "comment"
        from USER_TABLES ut
            left join ALL_OBJECTS ao
        on ut.TABLE_NAME = ao.OBJECT_NAME
            left join USER_TAB_COMMENTS utc
            on ut.TABLE_NAME = utc.TABLE_NAME
        where ao.OBJECT_TYPE = 'TABLE'
          AND ao.OWNER = #{database}
    </select>

    <select id="getTableMetasByDatabaseAndSchemaAndTable" resultType="tableMeta">
        select ao.OWNER         as "database",
               ut.TABLE_NAME    as "table",
               ut.NUM_ROWS      as "row_number",
               ut.BLOCKS * 8192 as "row_size",
               ao.CREATED       as "create_time",
               ao.LAST_DDL_TIME as "update_time",
               utc.COMMENTS     as "comment"
        from USER_TABLES ut
            left join ALL_OBJECTS ao
        on ut.TABLE_NAME = ao.OBJECT_NAME
            left join USER_TAB_COMMENTS utc
            on ut.TABLE_NAME = utc.TABLE_NAME
        where ao.OBJECT_TYPE = 'TABLE'
          AND ao.OWNER = #{database}
          AND ut.TABLE_NAME = #{table}
    </select>

    <select id="getColumnMetas" resultType="columnMeta">
        SELECT cols.OWNER                                           AS "DATABASE",
               cols.TABLE_NAME                                      AS "TABLE",
               cols.COLUMN_NAME                                     AS "COLUMN",
                CASE
                    WHEN cols.data_type LIKE 'INTERVAL%%' THEN 'INTERVAL'
                    ELSE REGEXP_SUBSTR(cols.data_type, '^[^(]+')
                END                                              AS DATA_TYPE,
                cols.data_type ||
                CASE
                    WHEN cols.data_type IN ('VARCHAR', 'VARCHAR2', 'CHAR') THEN '(' || cols.data_length || ')'
                    WHEN cols.data_type IN ('NVARCHAR2', 'NCHAR') THEN '(' || cols.char_length || ')'
                    WHEN cols.data_type IN ('NUMBER') AND cols.data_precision IS NOT NULL AND cols.data_scale IS NOT NULL
                THEN '(' || cols.data_precision || ', ' || cols.data_scale || ')'
                    WHEN cols.data_type IN ('NUMBER') AND cols.data_precision IS NOT NULL AND cols.data_scale IS NULL
                THEN '(' || cols.data_precision || ')'
                    WHEN cols.data_type IN ('RAW') THEN '(' || cols.data_length || ')'
                END                                              AS COLUMN_TYPE,
                cols.data_length                                     AS LENGTH,
                cols.data_precision                                  AS PRECISION,
                cols.data_scale                                      AS SCALE,
                com.comments                                         AS
                "COMMENT",
                cols.data_default                                    AS DEFAULT_VALUE,
                CASE cols.nullable WHEN 'N' THEN 'NO' ELSE 'YES' END AS NULLABLE
        FROM all_tab_columns cols
            LEFT JOIN all_col_comments com
            ON cols.table_name = com.table_name AND cols.column_name = com.column_name AND cols.owner = com.owner
        where cols.OWNER <include refid="SYS_SCHEMAS"/>
        ORDER BY cols.column_id
    </select>

    <select id="getColumnMetasByDatabaseAndSchema" resultType="columnMeta">
        SELECT cols.OWNER       AS "DATABASE",
               cols.TABLE_NAME  AS "TABLE",
               cols.COLUMN_NAME AS "COLUMN",
               CASE
                   WHEN cols.data_type LIKE 'INTERVAL%%' THEN 'INTERVAL'
                   ELSE REGEXP_SUBSTR(cols.data_type, '^[^(]+')
                   END          as DATA_TYPE,
               cols.data_type ||
               CASE
                   WHEN cols.data_type IN ('VARCHAR', 'VARCHAR2', 'CHAR') THEN '(' || cols.data_length || ')'
                   WHEN cols.data_type IN ('NVARCHAR2', 'NCHAR') THEN '(' || cols.char_length || ')'
                   WHEN cols.data_type IN ('NUMBER') AND cols.data_precision IS NOT NULL AND cols.data_scale IS NOT NULL
                       THEN '(' || cols.data_precision || ', ' || cols.data_scale || ')'
                   WHEN cols.data_type IN ('NUMBER') AND cols.data_precision IS NOT NULL AND cols.data_scale IS NULL
                       THEN '(' || cols.data_precision || ')'
                   WHEN cols.data_type IN ('RAW') THEN '(' || cols.data_length || ')'
                   END          AS COLUMN_TYPE,
               cols.data_length AS LENGTH,
               cols.data_precision AS PRECISION,
               cols.data_scale AS SCALE,
               com.comments AS"COMMENT",
               cols.data_default AS DEFAULT_VALUE,
               CASE cols.nullable WHEN 'N' THEN 'NO' ELSE 'YES' END AS NULLABLE
        FROM all_tab_columns cols
            LEFT JOIN all_col_comments com
        ON cols.table_name = com.table_name AND cols.column_name = com.column_name AND cols.owner = com.owner
        where cols.OWNER = #{database}
        ORDER BY cols.column_id
    </select>

    <select id="getColumnMetasByDatabaseAndSchemaAndTable" resultType="columnMeta">
        SELECT cols.OWNER       AS "DATABASE",
               cols.TABLE_NAME  AS "TABLE",
               cols.COLUMN_NAME AS "COLUMN",
               CASE
                   WHEN cols.data_type LIKE 'INTERVAL%%' THEN 'INTERVAL'
                   ELSE REGEXP_SUBSTR(cols.data_type, '^[^(]+')
                   END          as DATA_TYPE,
               cols.data_type ||
               CASE
                   WHEN cols.data_type IN ('VARCHAR', 'VARCHAR2', 'CHAR') THEN '(' || cols.data_length || ')'
                   WHEN cols.data_type IN ('NVARCHAR2', 'NCHAR') THEN '(' || cols.char_length || ')'
                   WHEN cols.data_type IN ('NUMBER') AND cols.data_precision IS NOT NULL AND cols.data_scale IS NOT NULL
                       THEN '(' || cols.data_precision || ', ' || cols.data_scale || ')'
                   WHEN cols.data_type IN ('NUMBER') AND cols.data_precision IS NOT NULL AND cols.data_scale IS NULL
                       THEN '(' || cols.data_precision || ')'
                   WHEN cols.data_type IN ('RAW') THEN '(' || cols.data_length || ')'
                   END          AS COLUMN_TYPE,
               cols.data_length AS LENGTH,
               cols.data_precision AS PRECISION,
               cols.data_scale AS SCALE,
               com.comments AS"COMMENT",
               cols.data_default AS DEFAULT_VALUE,
               CASE cols.nullable WHEN 'N' THEN 'NO' ELSE 'YES' END AS NULLABLE
        FROM all_tab_columns cols
            LEFT JOIN all_col_comments com
        ON cols.table_name = com.table_name AND cols.column_name = com.column_name AND cols.owner = com.owner
        where cols.OWNER = #{database} and cols.TABLE_NAME = #{table}
        ORDER BY cols.column_id
    </select>

    <select id="getColumnMetasByDatabaseAndSchemaAndTableAndColumn" resultType="columnMeta">
        SELECT cols.OWNER       AS "DATABASE",
               cols.TABLE_NAME  AS "TABLE",
               cols.COLUMN_NAME AS "COLUMN",
               CASE
                   WHEN cols.data_type LIKE 'INTERVAL%%' THEN 'INTERVAL'
                   ELSE REGEXP_SUBSTR(cols.data_type, '^[^(]+')
                   END          as DATA_TYPE,
               cols.data_type ||
               CASE
                   WHEN cols.data_type IN ('VARCHAR', 'VARCHAR2', 'CHAR') THEN '(' || cols.data_length || ')'
                   WHEN cols.data_type IN ('NVARCHAR2', 'NCHAR') THEN '(' || cols.char_length || ')'
                   WHEN cols.data_type IN ('NUMBER') AND cols.data_precision IS NOT NULL AND cols.data_scale IS NOT NULL
                       THEN '(' || cols.data_precision || ', ' || cols.data_scale || ')'
                   WHEN cols.data_type IN ('NUMBER') AND cols.data_precision IS NOT NULL AND cols.data_scale IS NULL
                       THEN '(' || cols.data_precision || ')'
                   WHEN cols.data_type IN ('RAW') THEN '(' || cols.data_length || ')'
                   END          AS COLUMN_TYPE,
               cols.data_length AS LENGTH,
               cols.data_precision AS PRECISION,
               cols.data_scale AS SCALE,
               com.comments AS"COMMENT",
               cols.data_default AS DEFAULT_VALUE,
               CASE cols.nullable WHEN 'N' THEN 'NO' ELSE 'YES' END AS NULLABLE
        FROM all_tab_columns cols
            LEFT JOIN all_col_comments com
        ON cols.table_name = com.table_name AND cols.column_name = com.column_name AND cols.owner = com.owner
        where cols.OWNER = #{database} and cols.TABLE_NAME = #{table}
          and cols.COLUMN_NAME = #{column}
    </select>

    <select id="getConstraintMetas" resultType="constraintKeyMeta">
        select uc.CONSTRAINT_NAME as name,
               uc.CONSTRAINT_TYPE as type,
               ucc.COLUMN_NAME    as "column",
               ucc.OWNER          as "database",
               ucc.TABLE_NAME     as "table"
        from USER_CONSTRAINTS uc
                 left join USER_CONS_COLUMNS ucc
                           on uc.OWNER = ucc.OWNER
                               and uc.TABLE_NAME = ucc.TABLE_NAME
                               and uc.CONSTRAINT_NAME = ucc.CONSTRAINT_NAME
    </select>

    <select id="getConstraintMetasByDatabaseAndSchema" resultType="constraintKeyMeta">
        select uc.CONSTRAINT_NAME as name,
               uc.CONSTRAINT_TYPE as type,
               ucc.COLUMN_NAME    as "column",
               ucc.OWNER          as "database",
               ucc.TABLE_NAME     as "table"
        from USER_CONSTRAINTS uc
                 left join USER_CONS_COLUMNS ucc
                           on uc.OWNER = ucc.OWNER
                               and uc.TABLE_NAME = ucc.TABLE_NAME
                               and uc.CONSTRAINT_NAME = ucc.CONSTRAINT_NAME
        WHERE uc.OWNER = #{database}
    </select>

    <select id="getConstraintMetasByDatabaseAndSchemaAndTable" resultType="constraintKeyMeta">
        select uc.CONSTRAINT_NAME as name,
               uc.CONSTRAINT_TYPE as type,
               ucc.COLUMN_NAME    as "column",
               ucc.OWNER          as "database",
               ucc.TABLE_NAME     as "table"
        from USER_CONSTRAINTS uc
                 left join USER_CONS_COLUMNS ucc
                           on uc.OWNER = ucc.OWNER
                               and uc.TABLE_NAME = ucc.TABLE_NAME
                               and uc.CONSTRAINT_NAME = ucc.CONSTRAINT_NAME
        WHERE uc.OWNER = #{database} and uc.TABLE_NAME = #{table}
    </select>
</mapper>
