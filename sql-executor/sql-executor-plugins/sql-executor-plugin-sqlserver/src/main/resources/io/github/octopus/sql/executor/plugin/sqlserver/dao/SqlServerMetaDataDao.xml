<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.github.octopus.sql.executor.plugin.sqlserver.dao.SqlServerMetaDataDao">

    <sql id="SYS_DATABASES">
        not in ('master', 'model', 'msdb', 'tempdb')
    </sql>

    <select id="getDatabaseMetas" resultType="databaseMeta">
        SELECT name, collation_name FROM sys.databases WHERE name
        <include refid="SYS_DATABASES"/>
    </select>

    <select id="getDatabaseMetaByDatabase" parameterType="java.lang.String" resultType="databaseMeta">
        SELECT name, collation_name
        FROM sys.databases
        where name = #{database}
    </select>

    <select id="getSchemaMetas" resultType="schemaMeta" parameterType="java.lang.String">
        SELECT name, schema_id as id FROM <if test="database != null">${database}.</if>sys.schemas
    </select>

    <select id="getSchemaMetaBySchema" parameterType="java.lang.String" resultType="schemaMeta">
        SELECT name, schema_id as id
        FROM <if test="database != null">${database}.</if>sys.schemas
        where name = #{schema}
    </select>

    <select id="getTableMetasByDatabaseAndSchema" resultType="tableMeta">
        select '${database}' as [database],
        t.name as [table],
        s.name as [schema],
        ddps.row_count as [row_number],
        ddps.reserved_page_count * 8 as [row_size],
        t.create_date as [create_time],
        t.modify_date as [update_time],
        ep.value as [comment]
        from ${database}.sys.tables t
        left join ${database}.sys.schemas s
        on t.schema_id = s.schema_id
        left join (select object_id, sum(row_count) as [row_count], sum(reserved_page_count) as [reserved_page_count]
        from ${database}.sys.dm_db_partition_stats
        group by object_id) ddps on t.object_id = ddps.object_id
        left join ${database}.sys.extended_properties ep
        on t.object_id = ep.major_id and ep.minor_id = 0 and ep.name = 'MS_Description'
        <where>
            <if test="schema != null">
                s.name = #{schema}
            </if>
        </where>
    </select>

    <select id="getTableMetasByDatabaseAndSchemaAndTable" resultType="tableMeta">
        select '${database}' as [database],
            t.name as [table],
            s.name                       as [schema],
            ddps.row_count               as [row_number],
            ddps.reserved_page_count * 8 as [row_size],
            t.create_date                as [create_time],
            t.modify_date                as [update_time],
            ep.value                     as [comment]
        from ${database}.sys.tables t
            left join ${database}.sys.schemas s
        on t.schema_id = s.schema_id
            left join (select object_id, sum(row_count) as [row_count], sum(reserved_page_count) as [reserved_page_count]
            from ${database}.sys.dm_db_partition_stats
            group by object_id) ddps on t.object_id = ddps.object_id
            left join ${database}.sys.extended_properties ep
            on t.object_id = ep.major_id and ep.minor_id = 0 and ep.name = 'MS_Description'
        where s.name = #{schema}
          and t.name = #{table}
    </select>

    <select id="getColumnMetasByDatabaseAndSchema" resultType="columnMeta">
        SELECT
        '${database}' AS [database],
        s.name AS [schema],
        tbl.name AS [table],
        col.name AS [column],
        ext.value AS [comment],
        types.name AS data_type,
        col.max_length AS length,
        col.precision AS precision,
        col.scale AS scale,
        col.is_nullable AS nullable,
        def.definition AS default_value
        FROM ${database}.sys.tables tbl
        inner join ${database}.sys.schemas s on tbl.schema_id = s.schema_id
        INNER JOIN ${database}.sys.columns col ON tbl.object_id = col.object_id
        LEFT JOIN ${database}.sys.types types ON col.user_type_id = types.user_type_id
        LEFT JOIN ${database}.sys.extended_properties ext ON ext.major_id = col.object_id AND ext.minor_id =
        col.column_id
        LEFT JOIN ${database}.sys.default_constraints def
        ON col.default_object_id = def.object_id AND ext.minor_id = col.column_id AND
        ext.name = 'MS_Description'
        <where>
            <if test="schema == null">
                s.name not in ('sys', 'dbo', 'guest', 'INFORMATION_SCHEMA') and s.name not like '%db_%'
            </if>
            <if test="schema != null">
                s.name = #{schema}
            </if>
        </where>
        ORDER BY tbl.name, col.column_id
    </select>

    <select id="getColumnMetasByDatabaseAndSchemaAndTable" resultType="columnMeta">
        SELECT '${database}' AS [database],
               s.name          AS [schema],
               tbl.name        AS [table],
               col.name        AS [column],
               ext.value       AS [comment],
               types.name      AS data_type,
               col.max_length  AS length,
               col.precision   AS precision,
               col.scale       AS scale,
               col.is_nullable AS nullable,
               def.definition  AS default_value
        FROM ${database}.sys.tables tbl
            inner join ${database}.sys.schemas s
        on tbl.schema_id = s.schema_id
            INNER JOIN ${database}.sys.columns col ON tbl.object_id = col.object_id
            LEFT JOIN ${database}.sys.types types ON col.user_type_id = types.user_type_id
            LEFT JOIN ${database}.sys.extended_properties ext ON ext.major_id = col.object_id AND ext.minor_id = col.column_id
            LEFT JOIN ${database}.sys.default_constraints def
            ON col.default_object_id = def.object_id AND ext.minor_id = col.column_id AND
            ext.name = 'MS_Description'
        WHERE s.name = #{schema}
          and tbl.name = #{table}
        ORDER BY tbl.name, col.column_id
    </select>

    <select id="getColumnMetasByDatabaseAndSchemaAndTableAndColumn" resultType="columnMeta">
        SELECT '${database}' AS [database],
            s.name          AS [schema],
            tbl.name        AS [table],
            col.name        AS [column],
            ext.value       AS [comment],
            types.name      AS data_type,
            col.max_length  AS length,
            col.precision   AS precision,
            col.scale       AS scale,
            col.is_nullable AS nullable,
            def.definition  AS default_value
        FROM ${database}.sys.tables tbl
            inner join ${database}.sys.schemas s
        on tbl.schema_id = s.schema_id
            INNER JOIN ${database}.sys.columns col ON tbl.object_id = col.object_id
            LEFT JOIN ${database}.sys.types types ON col.user_type_id = types.user_type_id
            LEFT JOIN ${database}.sys.extended_properties ext ON ext.major_id = col.object_id AND ext.minor_id = col.column_id
            LEFT JOIN ${database}.sys.default_constraints def
            ON col.default_object_id = def.object_id AND ext.minor_id = col.column_id AND
            ext.name = 'MS_Description'
        WHERE s.name = #{schema}
          and tbl.name = #{table}
          and col.name = #{column}
        ORDER BY tbl.name, col.column_id
    </select>

    <select id="getConstraintKeyMetasByDatabaseAndSchema" resultType="constraintKeyMeta">
        SELECT istc.TABLE_CATALOG as [database],
        istc.TABLE_SCHEMA as [schema],
        istc.TABLE_NAME as [table],
        istc.CONSTRAINT_NAME as [name],
        istc.CONSTRAINT_TYPE as [type],
        iskcu.COLUMN_NAME as [column]
        FROM ${database}.INFORMATION_SCHEMA.TABLE_CONSTRAINTS istc
        inner join ${database}.INFORMATION_SCHEMA.KEY_COLUMN_USAGE iskcu
        on istc.CONSTRAINT_CATALOG = iskcu.CONSTRAINT_CATALOG and
        istc.CONSTRAINT_SCHEMA = iskcu.CONSTRAINT_SCHEMA and istc.CONSTRAINT_NAME = iskcu.CONSTRAINT_NAME
        <where>
            <if test="schema != null">
                istc.TABLE_SCHEMA = #{schema}
            </if>
        </where>
        order by iskcu.TABLE_NAME, iskcu.ORDINAL_POSITION
    </select>

    <select id="getConstraintKeyMetasBySchemaAndTable" resultType="constraintKeyMeta">
        SELECT istc.TABLE_CATALOG as [database],
               istc.TABLE_SCHEMA    as [schema],
               istc.TABLE_NAME      as [table],
               istc.CONSTRAINT_NAME as [name],
               istc.CONSTRAINT_TYPE as [type],
               iskcu.COLUMN_NAME    as [column]
        FROM ${database}.INFORMATION_SCHEMA.TABLE_CONSTRAINTS istc
            inner join ${database}.INFORMATION_SCHEMA.KEY_COLUMN_USAGE iskcu
        on istc.CONSTRAINT_CATALOG = iskcu.CONSTRAINT_CATALOG and
            istc.CONSTRAINT_SCHEMA = iskcu.CONSTRAINT_SCHEMA and istc.CONSTRAINT_NAME = iskcu.CONSTRAINT_NAME
        where istc.TABLE_SCHEMA = #{schema}
          and istc.TABLE_NAME = #{table}
        order by iskcu.TABLE_NAME, iskcu.ORDINAL_POSITION
    </select>
</mapper>
